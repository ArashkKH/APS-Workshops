
// A LA CARTE ENTERTAINMENT – PRICELIST
// --------------------------------

####################################
 Data Structures
####################################
<OrderData>
	- orderID
	- <Attendees>
	- <ShowData>
	- <Sevices>

<PricingData>
	- <Discounts>
	- <Snacks>
	- <Valet>
	- <Coverage>
	- <Tickets>
	- ReservationFee

// second level sub Structures

<Attendees>
	- juniorNum = 0
	- AdultNum = 0
	- SeniorNum = 0

<ShowData>
	- Time
	- Type

<Sevices>
	<ValetData>
	<Snacks>

<Discounts>
	- for2
	- for3
	- for4
	- forMore

<Snacks>
	- nonAlchohol
	- alchoholic
	- misc

<Valet>
	- <StandarValet>
	- <VipValet>

<Coverage>
	- junior
	- Adult
	- Senior

<Tickets>
	- <Theatre>
	- <Musical>

// third level sub structures

<ValetData>
	- type
	- tipAmount

<Snacks>
	- nonAlchoholNum
	- alchoholicNum
	- miscNum

<StandarValet>
	- Morning
	- Evening

<VipValet>
	- Morning
	- Evening

<Theatre>
	- Morning
	- Evening
<Musical>
	- Morning
	- Evening
	


####################################
 Main logic
####################################

main
-------------------------

1.	DECLARE : CurrentOrder (<OrderData>)
2.	DECLARE : StaticData (<PricingData>)
3.	Declare sumOfPeople
4.	Declare PaymentResult and set to false
5.	Declare isQrScanned and set to false
6.	Declare currentScanService
7.	Declare isLeaving and set to false

8.	PRINT "Welcome to A la Carte Entertainment reservation System Click 
		add Order to start the process!"

9.	RENDER "Add Order" Button
10.	has the "Add Order" Button been pressed?
		NO : A. REPEAT from Step #5

11.	NAVIGATE to "ORDER iNFORMATION" page
12.	PROMPT "show type:"
13.	RENDER two options type of radioboxes ( Musical or Theatre )

14.	PROMPT "show time:"
15.	RENDER two options type of radioboxes ( Matinée or Evening )

16.	PROMPT "Enter number of Junior participants:"
17.	RENDER nummber input box for Juniors 

18.	PROMPT "Enter number of Adult participants:"
19.	RENDER nummber input box for Adults

20.	PROMPT "Enter number of Senior participants:"
21.	RENDER nummber input box for Seniors 

22.	RENDER "next step" Button
23.	has the "next step" Button been pressed?
	NO:	REPEAT from step #18

24.	CALL: updateTicketData ()

25.	NAVIGATE to "RESERVATION" page

26.	SET sumOfPeople to the total of participants
	(sumOfPeople = OrderData::Attendees:juniorNum +
					OrderData::Attendees:adultNum +
					OrderData::Attendees:seniorNum)

27.	PRINT "you have selected to participate in {OrderData::ShowData::Time} at {OrderData::ShowData::Type} for
	{sumOfPeople} please note to have your place reserved you need to make a payment of
	{PricingData::ReservationFee} dollars"

28.	RENDER "Click to pay Button"
29.	has the "Click to pay Button" been pressed ? 
		NO: REPEAT from step #26
		YES:A.	CALL processPayment_PayPal(PricingData::ReservationFee) // <-- closed Process
			B.	SET PaymentResult to result of processPayment_PayPal() function call (PaymentResult = processPayment_PayPal(50))
30.	was the payment successful? (PaymentResult == true)
		NO: A.	Print "Payment Unsuccessfull please try again or contact support."
			B.	REPEAT from step #26

31.	set PaymentResult to false

32.	NAVIGATE to "Ready For Show" Page

33.	Print	"Congrats, now you are ready to participate in the show
			please make sure you scan the QR-Code below for using any of the 
			on-sight services - additional charges may apply"

34. CALL: GenerateQrCode(OrderData::orderID) // <-- closed Process

// in entertainment sight

35.	CALL: fetchScanStat(OrderData::orderID) // <-- closed Process
36. SET the result of fetchScanStat() to isQrScanned (isQrScanned = fetchScanStat(OrderData::orderID)) 
37. has the user scanned their QrCode for any services? (isQrScanned == true)
		YES:	A.CALL: fetchScanService(OrderData::orderID) // <-- closed Process
				B.SET the result of fetchScanService() to currentScanService
				C.has the user scanned for valet Parking? (currentScanService == "valet")
					YES:1.	CALL addValetCharge()
						2.	set isQrScanned to false
				D.has the user scanned for SnackBar? (currentScanService == "SnackBar")
					YES:1.	CALL addSnackCharge()
						2.	set isQrScanned to false
				E.has the user scanned for leaving? (currentScanService == "leaving")
					YES:1.	set isLeaving to true
38.	is the user leaving the area ? (isLeaving == true)
		NO :	A.REPEAT from step#32
39.	print "your session has ended,
			your receipt is as following"
40. CALL:printReceipt(currentOrder ,StaticData)
41.	SET totalPayment to the result of printReceipt() function
42.	RENDER "Click to pay Button"
43.	has the "Click to pay Button" been pressed ? 
		NO: REPEAT from step #39
		YES:A.	CALL processPayment_PayPal(totalPayment) // <-- closed Process
			B.	SET PaymentResult to result of processPayment_PayPal() function call (PaymentResult = processPayment_PayPal(totalPayment))
44.	was the payment successful? (PaymentResult == true)
		NO: A.	Print "Payment Unsuccessfull please try again or contact support."
			B.	REPEAT from step #39
		YES:A.	Print "Payment Successful, thank you for using our services :)"
END

####################################
 Sub-Processes ("open boxes")
####################################

AddSnackCharge
---------------

1. SET alchoholPrice to 7.5
2. SET nonAlcoholPrice to 2.25
3. SET candyPrice 1.75

4. DECLARE purchasedAlcohol = FALSE
5. DECLARE purchasedNonAlcoholic = FALSE
6. Declare purchasedCandy = FALSE

7. Customer purchases items

8. What did the customer purchase?
	Alchohol: add alchohol to purchase (numAlchohol += 1)		
	Non-alcoholic drink: add non-alcoholic to purchase (numNonAlcohol += 1)
	Candy: add candy to purchase (numCandy += 1)

9. Determine what customer purchased
	Did they purchase alcohol? (numAlcohol > 0)
		SET purchasedAlcohol = TRUE
	Did they purchase non-alcoholic drinks? (numNonAlcohol > 0)
		SET purchasedNonAlcoholic = TRUE
	Did they purchase candy? (numCandy > 0)
		SET purchasedAlcohol = TRUE

10. Determine costs of each category


updateTicketData
------------------------
1.	set OrderData::orderNumber to result of newOrderNumber() process
2.	has the user input a number in "junior" input ? 
	YES	:A. set OrderData::Attendees:juniorNum to "junior" input value

3.	has the user input a number in "adult" input ? 
	YES	:A. set OrderData::Attendees:adultNum to "adult" input value

3.	has the user input a number in "senior" input ? 
	YES	:A. set OrderData::Attendees:seniorNum to "senior" input value

4.	set OrderData::ShowData::Time to "show time" input value
5.	set OrderData::ShowData::Type to "show type" input value

END

printReceipt
-------------------------
1. Recieves: Variable currentOrder of type <order>
1. Recieves: Variable StaticData of type <PricingData>
2. Create variable subTotal, tax and total
3. Display order number( Display: Order #: currentOrder::orderId)
4. Display Date ( Display: Date: currentOrder::feature::date)
5. Display cover charges (Display: Cover Charges)
	Is there a child in the group? (currentOrder::charge::numChild > 0)
		Yes: Display: Children (currentOrder::charge::numChild @ currentOrder::charge::childPrice)    currentOrder::charge::numChild * currentOrder::charge::childPrice

	Is there an adult in the group? (currentOrder::charge::numAdult > 0)
		Yes: Display: Adults (currentOrder::charge::numAdult @ currentOrder::charge::adultPrice)    currentOrder::charge::numAdult * currentOrder::charge::adultPrice

	Is there a senior in the group? (currentOrder::charge::numSenior > 0)
		Yes: Display: Seniors (currentOrder::charge::numSenior @ currentOrder::charge::seniorPrice)    currentOrder::charge::numSenior * currentOrder::charge::seniorPrice

	Display  currentOrder::totalCoverCharge
6. Display ticket charges(Display: Ticket Charges)
	Display: currentOrder::feature::time currentOrder::feature::type (currentOrder::feature::numTickets @ currentOrder::feature::ticketPrice)  currentOrder::totalTicketCharge
7. Is there a discount? (currentOrder::discountPercent > 0)
	Yes: Display: Discount (currentOrder::feature::numTickets @ currentOrder::discountPercent)  currentOrder::discountAmount
8. Display (currentOrder::totalTicketCharge - currentOrder::discountAmount)
9. Did customer buy snacks? (currentOrder::snacks::purchaseSnacks == true)
	Yes: Display Snack Charges
	     Did the customer buy non-alcoholic beverages? (currentOrder::snacks::numNonAlcohol > 0)
			Yes: Display Non Alc. Bev. (currentOrder::snacks::numNonAlcohol @ currentOrder::snacks::nonAlcoholPrice)  currentOrder::snacks::numNonAlcohol * currentOrder::snacks::nonAlcoholPrice

	     Did the customer buy alcoholic beverages? (currentOrder::snacks::numAlcohol > 0)
			Yes: Display Alcohol. Bev. (currentOrder::snacks::numAlcohol @ currentOrder::snacks::alcoholPrice)  currentOrder::snacks::numAlcohol * currentOrder::snacks::alcoholPrice

	     Did the customer buy candy? (currentOrder::snacks::numCandy > 0)
			Yes: Display Candy (currentOrder::snacks::numCandy @ currentOrder::snacks::candyPrice)  currentOrder::snacks::numCandy * currentOrder::snacks::candyPrice
	     Display total snacks price (Display: currentOrder::totalSnackCharge)
10. Did the customer use the valet? (currentOrder::valet::visitNum > 0)
	Yes: Display Valet Charges
	     Display currentOrder::feature::time - currentOrder::valet::valetType : currentOrder::valetCharge
	     Did the user tip? (currentOrder::valet::isTip == true)
			Yes: Display Tip : currentOrder::valet::tipAmount
	     Display total valet charges (currentOrder::valetCharge + currentOrder::valet::tipAmount)
11. Calculate Sub-Total (subTotal = currentOrder::totalCoverCharge + (currentOrder::totalTicketCharge - currentOrder::discountAmount) + currentOrder::totalSnackCharge +(currentOrder::valetCharge + currentOrder::valet::tipAmount
12. Display Sub-Total ( Display: Sub-Total: subTotal)
13. Calculate Tax ( tax = subTotal * (currentOrder::taxPercent / 100))
14. Display Tax ( Display: Tax : tax)
15. Display: tax + subtotal
16. Display: Deposit: -currentOrder::depositAmount
17. Calculate total (currentOrder::total = subtotal + tax - currentOrder::depositAmount)
18. Display: Total : currentOrder::total
19. Return currentOrder
20. End

ApplyDiscount
--------------------
1. Recieves attendeeQty 
2. Receives ticketPrice

3. How many attendees are there?
	are there 2? (attendeeQty == 2)
		set the discount percent to 5
	are there 3? (attendeeQty == 3)
		set the discount percent to 15
	are there 4? (attendeeQty == 4)
		set the discount percent to 25
	are there 5 or more? (attendeeQty >= 5)
		set the discount percent to 30

4. Calculate the discounted price
5. Store the discounted price 


addValetCharge
-------------------------
1. Recieves: Variable currentOrder of type <order>
2. Increment the visit number (currentOrder::valet::visitNum += 1)
3. What is the visit number?
	Visit 1: What is the show time? (currentOrder::feature::time == ?)
			Matin: a. Prompt user to choose Standard or VIP (currentOrder::valet::valetType = userInput)
			       		1. Standard: Update valet charge (currentOrder::valetCharge = matinStdPrice)
			       		2. VIP: Update valet charge (currentOrder::valetCharge = matinVipPrice)

			Evening: a. Prompt user to choose Standard or VIP (currentOrder::valet::valetType = userInput)
				 	1. Standard: Update valet charge (currentOrder::valetCharge = eveStdPrice)
				 	2. VIP: Update valet charge (currentOrder::valetCharge = eveVipPrice)

	Visit 2: a. Prompt the user if they want to tip (Update currentOrder::valet::isTip)
		 b. Are they tipping? (Is currentOrder::valet::isTip == true?)
			Yes: 1. Prompt user to enter tip amount
			     2. Store tip amount (currentOrder::valet::tipAmount = userInput)
			    
4. Return currentOrder
5. End	


AddCoverage
---------------------
1.  Receives: PeopleCategory (child or adult or senior)
2.  Receives: QuantityOfPeople

3.  add the quantity of reserving people to the related type 
        (CoverCharge::[QuantityOfPeople] += QuantityOfPeople)
END



####################################
 Sub-Processes ("closed boxes")
####################################

----------------------------- newOrderNumber -----------------------------
1.  This "closed box" process will generate a number on database to reffer
    to a specific order.

-------------------------- processPayment_PayPal -------------------------
1.  This "closed box" process will take the user to payment page and returns a flag
    wether the transaction was successful or not 

----------------------------- GenerateQrCode -----------------------------
1.  This "closed box" process will take user orderID
2.  It will generate and return the QR-code dedicated to user Order


------------------------------ fetchScanStat -----------------------------
1.  This "closed box" process will take user orderID
2.  It will return a value of true or false based on if the user dedicated to orderID
    has scanned their QrCode or not